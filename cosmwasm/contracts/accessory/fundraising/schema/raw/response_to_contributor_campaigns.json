{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ListResponse",
  "type": "object",
  "required": [
    "campaigns"
  ],
  "properties": {
    "campaigns": {
      "description": "list all registered ids",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Campaign"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Campaign": {
      "type": "object",
      "required": [
        "contributed_balance",
        "contributors",
        "creator",
        "description",
        "end_time_epoch",
        "funding_goal",
        "funding_threshold",
        "image_url",
        "locked_balance",
        "open",
        "success",
        "title"
      ],
      "properties": {
        "contributed_balance": {
          "description": "Contribution balance in Native and CW20 tokens",
          "allOf": [
            {
              "$ref": "#/definitions/GenericBalance"
            }
          ]
        },
        "contributors": {
          "description": "All wallets that have contributed to a given campaign",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addr"
          }
        },
        "creator": {
          "$ref": "#/definitions/Addr"
        },
        "description": {
          "description": "Description of the campaign, a more in depth description of how to meet the campaign condition",
          "type": "string"
        },
        "end_time_epoch": {
          "description": "When end time (in seconds since epoch 00:00:00 UTC on 1 January 1970) is set and block time exceeds this value, the campaign is expired. Once an campaign is expired, it can be returned to the original funder (via \"refund\").",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "funding_goal": {
          "description": "amount / tokens that a campaign is looking to raise in exchange for their reward tokens",
          "allOf": [
            {
              "$ref": "#/definitions/GenericBalance"
            }
          ]
        },
        "funding_threshold": {
          "description": "Balance that represents % of funding goal that a campaign must meet in order to release their reward tokens to users and to be able to access the contributed funds",
          "allOf": [
            {
              "$ref": "#/definitions/GenericBalance"
            }
          ]
        },
        "image_url": {
          "description": "Image url to use on a fundraising profile page",
          "type": "string"
        },
        "locked_balance": {
          "description": "Locked Balance in Native and Cw20 tokens",
          "allOf": [
            {
              "$ref": "#/definitions/GenericBalance"
            }
          ]
        },
        "open": {
          "description": "whether the campaign is open for new contributions / top-ups",
          "type": "boolean"
        },
        "success": {
          "description": "Whether or not a campaign was successful in fundraising If TRUE: users can claim their rewards If FALSE: users can claim back contributed funds",
          "type": "boolean"
        },
        "title": {
          "description": "Title of the campaign, for example for a bug bounty \"Fix issue in contract.rs\"",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20CoinVerified": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "GenericBalance": {
      "type": "object",
      "required": [
        "cw20",
        "native"
      ],
      "properties": {
        "cw20": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cw20CoinVerified"
          }
        },
        "native": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
