{
  "contract_name": "fundraising",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "accepted_tokens",
      "campaign_period_seconds",
      "registrar_contract",
      "tax_rate"
    ],
    "properties": {
      "accepted_tokens": {
        "$ref": "#/definitions/GenericBalance"
      },
      "campaign_period_seconds": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "registrar_contract": {
        "type": "string"
      },
      "tax_rate": {
        "$ref": "#/definitions/Decimal"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Cw20CoinVerified": {
        "type": "object",
        "required": [
          "address",
          "amount"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/Addr"
          },
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "GenericBalance": {
        "type": "object",
        "required": [
          "cw20",
          "native"
        ],
        "properties": {
          "cw20": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Cw20CoinVerified"
            }
          },
          "native": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create"
        ],
        "properties": {
          "create": {
            "type": "object",
            "required": [
              "endowment_id",
              "msg"
            ],
            "properties": {
              "endowment_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "msg": {
                "$ref": "#/definitions/CreateMsg"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Adds all sent native tokens to the campaign (locked)",
        "type": "object",
        "required": [
          "top_up"
        ],
        "properties": {
          "top_up": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Adds all sent native tokens to the campaign (contributions)",
        "type": "object",
        "required": [
          "contribute"
        ],
        "properties": {
          "contribute": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Sends respective contributed tokens to the creator of a campaign. Anyone can do this and succeed, so long as the underlying conditions to conclude a campaign are met (fund amount raised || time elapsed)",
        "type": "object",
        "required": [
          "close_campaign"
        ],
        "properties": {
          "close_campaign": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "id is a u64 name for the campaign from create",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Contributors to a campaign may claim their rewards due from the locked balance once a campaign is closed and met the threshold",
        "type": "object",
        "required": [
          "claim_rewards"
        ],
        "properties": {
          "claim_rewards": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Contributors to a campaign may claim a refund of all contributions made to a campaign that has closed but failed to met it's threshold",
        "type": "object",
        "required": [
          "refund_contributions"
        ],
        "properties": {
          "refund_contributions": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allow registrar contract's owner to update configs of this contract",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "accepted_tokens",
              "campaign_period_seconds",
              "tax_rate"
            ],
            "properties": {
              "accepted_tokens": {
                "$ref": "#/definitions/GenericBalance"
              },
              "campaign_period_seconds": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "tax_rate": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "This accepts a properly-encoded ReceiveMsg from a cw20 contract",
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CreateMsg": {
        "type": "object",
        "required": [
          "description",
          "end_time_epoch",
          "funding_goal",
          "image_url",
          "reward_threshold",
          "title"
        ],
        "properties": {
          "description": {
            "description": "Longer description of the campaign, e.g. what conditions should be met",
            "type": "string"
          },
          "end_time_epoch": {
            "description": "When end time (in seconds since epoch 00:00:00 UTC on 1 January 1970) is set and block time exceeds this value, the campaign is expired. Once an campaign is expired, it can be returned to the original funder (via \"refund\").",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "funding_goal": {
            "description": "Funding goal is the amount & addr/demon that a campaign is looking to raise in exchange for their reward tokens For simplicity, we'll only accept a single token as the input for a given campaign (for now)",
            "allOf": [
              {
                "$ref": "#/definitions/GenericBalance"
              }
            ]
          },
          "image_url": {
            "description": "Image url to use on a fundraising profile page",
            "type": "string"
          },
          "reward_threshold": {
            "description": "Funding rewards threshold to trigger release of locked rewards to users. Must raise X% of the funding goal to trigger release. Rolls back contributions and locked funds if not hit.",
            "allOf": [
              {
                "$ref": "#/definitions/Decimal"
              }
            ]
          },
          "title": {
            "description": "Title of the campaign",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Cw20CoinVerified": {
        "type": "object",
        "required": [
          "address",
          "amount"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/Addr"
          },
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "GenericBalance": {
        "type": "object",
        "required": [
          "cw20",
          "native"
        ],
        "properties": {
          "cw20": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Cw20CoinVerified"
            }
          },
          "native": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Show campaigns that meet optional filter criteria.",
        "type": "object",
        "required": [
          "list"
        ],
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "creator": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "open": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "success": {
                "type": [
                  "boolean",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Show campaigns that a given address has contributed to",
        "type": "object",
        "required": [
          "contributor_campaigns"
        ],
        "properties": {
          "contributor_campaigns": {
            "type": "object",
            "required": [
              "contributor"
            ],
            "properties": {
              "contributor": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the details of the named campaign, error if not created",
        "type": "object",
        "required": [
          "details"
        ],
        "properties": {
          "details": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "contributor_campaigns": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListResponse",
      "type": "object",
      "required": [
        "campaigns"
      ],
      "properties": {
        "campaigns": {
          "description": "list all registered ids",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Campaign"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Campaign": {
          "type": "object",
          "required": [
            "contributed_balance",
            "contributors",
            "creator",
            "description",
            "end_time_epoch",
            "funding_goal",
            "funding_threshold",
            "image_url",
            "locked_balance",
            "open",
            "success",
            "title"
          ],
          "properties": {
            "contributed_balance": {
              "description": "Contribution balance in Native and CW20 tokens",
              "allOf": [
                {
                  "$ref": "#/definitions/GenericBalance"
                }
              ]
            },
            "contributors": {
              "description": "All wallets that have contributed to a given campaign",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addr"
              }
            },
            "creator": {
              "$ref": "#/definitions/Addr"
            },
            "description": {
              "description": "Description of the campaign, a more in depth description of how to meet the campaign condition",
              "type": "string"
            },
            "end_time_epoch": {
              "description": "When end time (in seconds since epoch 00:00:00 UTC on 1 January 1970) is set and block time exceeds this value, the campaign is expired. Once an campaign is expired, it can be returned to the original funder (via \"refund\").",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "funding_goal": {
              "description": "amount / tokens that a campaign is looking to raise in exchange for their reward tokens",
              "allOf": [
                {
                  "$ref": "#/definitions/GenericBalance"
                }
              ]
            },
            "funding_threshold": {
              "description": "Balance that represents % of funding goal that a campaign must meet in order to release their reward tokens to users and to be able to access the contributed funds",
              "allOf": [
                {
                  "$ref": "#/definitions/GenericBalance"
                }
              ]
            },
            "image_url": {
              "description": "Image url to use on a fundraising profile page",
              "type": "string"
            },
            "locked_balance": {
              "description": "Locked Balance in Native and Cw20 tokens",
              "allOf": [
                {
                  "$ref": "#/definitions/GenericBalance"
                }
              ]
            },
            "open": {
              "description": "whether the campaign is open for new contributions / top-ups",
              "type": "boolean"
            },
            "success": {
              "description": "Whether or not a campaign was successful in fundraising If TRUE: users can claim their rewards If FALSE: users can claim back contributed funds",
              "type": "boolean"
            },
            "title": {
              "description": "Title of the campaign, for example for a bug bounty \"Fix issue in contract.rs\"",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Cw20CoinVerified": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "GenericBalance": {
          "type": "object",
          "required": [
            "cw20",
            "native"
          ],
          "properties": {
            "cw20": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cw20CoinVerified"
              }
            },
            "native": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "details": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DetailsResponse",
      "type": "object",
      "required": [
        "contributed_balance",
        "contributor_count",
        "creator",
        "description",
        "end_time_epoch",
        "funding_goal",
        "funding_threshold",
        "id",
        "image_url",
        "locked_balance",
        "title"
      ],
      "properties": {
        "contributed_balance": {
          "description": "Balance of native/cw20 tokens contributed to the fundraising campaign",
          "allOf": [
            {
              "$ref": "#/definitions/GenericBalance"
            }
          ]
        },
        "contributor_count": {
          "description": "Number of contributor addresses for a give campaign",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "creator": {
          "description": "if refunded, locked funds go back to the creator and contribution funds go back to the participants",
          "type": "string"
        },
        "description": {
          "description": "Longer description of the campaign, e.g. what conditions should be met",
          "type": "string"
        },
        "end_time_epoch": {
          "description": "When end time (in seconds since epoch 00:00:00 UTC on 1 January 1970) is set and block time exceeds this value, the campaign is expired. Once an campaign is expired, it can be returned to the original funder (via \"refund\").",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "funding_goal": {
          "description": "amount / tokens that a campaign is looking to raise in exchange for their reward tokens",
          "allOf": [
            {
              "$ref": "#/definitions/GenericBalance"
            }
          ]
        },
        "funding_threshold": {
          "$ref": "#/definitions/GenericBalance"
        },
        "id": {
          "description": "id of this campaign",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "image_url": {
          "description": "Image url to use on a fundraising profile page",
          "type": "string"
        },
        "locked_balance": {
          "description": "Balance of native/cw20 tokens locked as fundraising reward",
          "allOf": [
            {
              "$ref": "#/definitions/GenericBalance"
            }
          ]
        },
        "title": {
          "description": "Title of the campaign",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Cw20CoinVerified": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "GenericBalance": {
          "type": "object",
          "required": [
            "cw20",
            "native"
          ],
          "properties": {
            "cw20": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cw20CoinVerified"
              }
            },
            "native": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListResponse",
      "type": "object",
      "required": [
        "campaigns"
      ],
      "properties": {
        "campaigns": {
          "description": "list all registered ids",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Campaign"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Campaign": {
          "type": "object",
          "required": [
            "contributed_balance",
            "contributors",
            "creator",
            "description",
            "end_time_epoch",
            "funding_goal",
            "funding_threshold",
            "image_url",
            "locked_balance",
            "open",
            "success",
            "title"
          ],
          "properties": {
            "contributed_balance": {
              "description": "Contribution balance in Native and CW20 tokens",
              "allOf": [
                {
                  "$ref": "#/definitions/GenericBalance"
                }
              ]
            },
            "contributors": {
              "description": "All wallets that have contributed to a given campaign",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addr"
              }
            },
            "creator": {
              "$ref": "#/definitions/Addr"
            },
            "description": {
              "description": "Description of the campaign, a more in depth description of how to meet the campaign condition",
              "type": "string"
            },
            "end_time_epoch": {
              "description": "When end time (in seconds since epoch 00:00:00 UTC on 1 January 1970) is set and block time exceeds this value, the campaign is expired. Once an campaign is expired, it can be returned to the original funder (via \"refund\").",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "funding_goal": {
              "description": "amount / tokens that a campaign is looking to raise in exchange for their reward tokens",
              "allOf": [
                {
                  "$ref": "#/definitions/GenericBalance"
                }
              ]
            },
            "funding_threshold": {
              "description": "Balance that represents % of funding goal that a campaign must meet in order to release their reward tokens to users and to be able to access the contributed funds",
              "allOf": [
                {
                  "$ref": "#/definitions/GenericBalance"
                }
              ]
            },
            "image_url": {
              "description": "Image url to use on a fundraising profile page",
              "type": "string"
            },
            "locked_balance": {
              "description": "Locked Balance in Native and Cw20 tokens",
              "allOf": [
                {
                  "$ref": "#/definitions/GenericBalance"
                }
              ]
            },
            "open": {
              "description": "whether the campaign is open for new contributions / top-ups",
              "type": "boolean"
            },
            "success": {
              "description": "Whether or not a campaign was successful in fundraising If TRUE: users can claim their rewards If FALSE: users can claim back contributed funds",
              "type": "boolean"
            },
            "title": {
              "description": "Title of the campaign, for example for a bug bounty \"Fix issue in contract.rs\"",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Cw20CoinVerified": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "GenericBalance": {
          "type": "object",
          "required": [
            "cw20",
            "native"
          ],
          "properties": {
            "cw20": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cw20CoinVerified"
              }
            },
            "native": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
