{
  "contract_name": "gov",
  "contract_version": "2.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "gov_hodler",
      "halo_token",
      "proposal_deposit",
      "quorum",
      "registrar_contract",
      "snapshot_period",
      "threshold",
      "timelock_period",
      "unbonding_period",
      "voting_period"
    ],
    "properties": {
      "gov_hodler": {
        "type": "string"
      },
      "halo_token": {
        "type": "string"
      },
      "proposal_deposit": {
        "$ref": "#/definitions/Uint128"
      },
      "quorum": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "registrar_contract": {
        "type": "string"
      },
      "snapshot_period": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "threshold": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "timelock_period": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "unbonding_period": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "voting_period": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "execute_poll_msgs"
        ],
        "properties": {
          "execute_poll_msgs": {
            "type": "object",
            "required": [
              "poll_id"
            ],
            "properties": {
              "poll_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "register_contracts"
        ],
        "properties": {
          "register_contracts": {
            "type": "object",
            "required": [
              "halo_token"
            ],
            "properties": {
              "halo_token": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "gov_hodler": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "owner": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "proposal_deposit": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "quorum": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "snapshot_period": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "threshold": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "timelock_period": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "unbonding_period": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "voting_period": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cast_vote"
        ],
        "properties": {
          "cast_vote": {
            "type": "object",
            "required": [
              "amount",
              "poll_id",
              "vote"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "poll_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "vote": {
                "$ref": "#/definitions/VoteOption"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw_voting_tokens"
        ],
        "properties": {
          "withdraw_voting_tokens": {
            "type": "object",
            "properties": {
              "amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "claim_voting_tokens"
        ],
        "properties": {
          "claim_voting_tokens": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "end_poll"
        ],
        "properties": {
          "end_poll": {
            "type": "object",
            "required": [
              "poll_id"
            ],
            "properties": {
              "poll_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "execute_poll"
        ],
        "properties": {
          "execute_poll": {
            "type": "object",
            "required": [
              "poll_id"
            ],
            "properties": {
              "poll_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "VoteOption": {
        "type": "string",
        "enum": [
          "yes",
          "no"
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claims shows the number of tokens this address can access when they are done unbonding",
        "type": "object",
        "required": [
          "claims"
        ],
        "properties": {
          "claims": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "staker"
        ],
        "properties": {
          "staker": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "poll"
        ],
        "properties": {
          "poll": {
            "type": "object",
            "required": [
              "poll_id"
            ],
            "properties": {
              "poll_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "polls"
        ],
        "properties": {
          "polls": {
            "type": "object",
            "properties": {
              "filter": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PollStatus"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "order_by": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/OrderBy"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "voters"
        ],
        "properties": {
          "voters": {
            "type": "object",
            "required": [
              "poll_id"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "order_by": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/OrderBy"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "poll_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "OrderBy": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "PollStatus": {
        "type": "string",
        "enum": [
          "in_progress",
          "passed",
          "rejected",
          "executed",
          "expired",
          "failed"
        ]
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "We currently take no arguments for migrations",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "claims": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ClaimsResponse",
      "type": "object",
      "required": [
        "claims"
      ],
      "properties": {
        "claims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Claim"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Claim": {
          "type": "object",
          "required": [
            "amount",
            "release_at"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "release_at": {
              "$ref": "#/definitions/Expiration"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "halo_token",
        "owner",
        "proposal_deposit",
        "quorum",
        "snapshot_period",
        "threshold",
        "timelock_period",
        "unbonding_period",
        "voting_period"
      ],
      "properties": {
        "halo_token": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "proposal_deposit": {
          "$ref": "#/definitions/Uint128"
        },
        "quorum": {
          "$ref": "#/definitions/Decimal"
        },
        "snapshot_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "threshold": {
          "$ref": "#/definitions/Decimal"
        },
        "timelock_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "unbonding_period": {
          "$ref": "#/definitions/Duration"
        },
        "voting_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Duration": {
          "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "height"
              ],
              "properties": {
                "height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Time in seconds",
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "poll": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PollResponse",
      "type": "object",
      "required": [
        "creator",
        "deposit_amount",
        "description",
        "end_height",
        "id",
        "no_votes",
        "status",
        "title",
        "yes_votes"
      ],
      "properties": {
        "creator": {
          "type": "string"
        },
        "deposit_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "description": {
          "type": "string"
        },
        "end_height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "execute_data": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PollExecuteMsg"
          }
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "link": {
          "type": [
            "string",
            "null"
          ]
        },
        "no_votes": {
          "$ref": "#/definitions/Uint128"
        },
        "proposal_type": {
          "type": [
            "string",
            "null"
          ]
        },
        "staked_amount": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "status": {
          "$ref": "#/definitions/PollStatus"
        },
        "title": {
          "type": "string"
        },
        "total_balance_at_end_poll": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "yes_votes": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "PollExecuteMsg": {
          "type": "object",
          "required": [
            "msg",
            "order"
          ],
          "properties": {
            "fund_rotation": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "funding_goal": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "msg": {
              "$ref": "#/definitions/Binary"
            },
            "order": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "split_to_liquid": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "treasury_tax_rate": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "PollStatus": {
          "type": "string",
          "enum": [
            "in_progress",
            "passed",
            "rejected",
            "executed",
            "expired",
            "failed"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "polls": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PollsResponse",
      "type": "object",
      "required": [
        "polls"
      ],
      "properties": {
        "polls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PollResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "PollExecuteMsg": {
          "type": "object",
          "required": [
            "msg",
            "order"
          ],
          "properties": {
            "fund_rotation": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "funding_goal": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "msg": {
              "$ref": "#/definitions/Binary"
            },
            "order": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "split_to_liquid": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "treasury_tax_rate": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "PollResponse": {
          "type": "object",
          "required": [
            "creator",
            "deposit_amount",
            "description",
            "end_height",
            "id",
            "no_votes",
            "status",
            "title",
            "yes_votes"
          ],
          "properties": {
            "creator": {
              "type": "string"
            },
            "deposit_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "description": {
              "type": "string"
            },
            "end_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "execute_data": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/PollExecuteMsg"
              }
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "link": {
              "type": [
                "string",
                "null"
              ]
            },
            "no_votes": {
              "$ref": "#/definitions/Uint128"
            },
            "proposal_type": {
              "type": [
                "string",
                "null"
              ]
            },
            "staked_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "$ref": "#/definitions/PollStatus"
            },
            "title": {
              "type": "string"
            },
            "total_balance_at_end_poll": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "yes_votes": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "PollStatus": {
          "type": "string",
          "enum": [
            "in_progress",
            "passed",
            "rejected",
            "executed",
            "expired",
            "failed"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "staker": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StakerInfoResponse",
      "type": "object",
      "required": [
        "bond_amount",
        "pending_reward",
        "reward_index",
        "staker"
      ],
      "properties": {
        "bond_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "pending_reward": {
          "$ref": "#/definitions/Uint128"
        },
        "reward_index": {
          "$ref": "#/definitions/Decimal"
        },
        "staker": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StateResponse",
      "type": "object",
      "required": [
        "poll_count",
        "total_deposit",
        "total_share"
      ],
      "properties": {
        "poll_count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_deposit": {
          "$ref": "#/definitions/Uint128"
        },
        "total_share": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "voters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VotersResponse",
      "type": "object",
      "required": [
        "voters"
      ],
      "properties": {
        "voters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VotersResponseItem"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "VoteOption": {
          "type": "string",
          "enum": [
            "yes",
            "no"
          ]
        },
        "VotersResponseItem": {
          "type": "object",
          "required": [
            "balance",
            "vote",
            "voter"
          ],
          "properties": {
            "balance": {
              "$ref": "#/definitions/Uint128"
            },
            "vote": {
              "$ref": "#/definitions/VoteOption"
            },
            "voter": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
