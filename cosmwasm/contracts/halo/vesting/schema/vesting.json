{
  "contract_name": "vesting",
  "contract_version": "2.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "halo_token",
      "owner"
    ],
    "properties": {
      "halo_token": {
        "type": "string"
      },
      "owner": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "halo_token": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "owner": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "register_vesting_accounts"
        ],
        "properties": {
          "register_vesting_accounts": {
            "type": "object",
            "required": [
              "vesting_accounts"
            ],
            "properties": {
              "vesting_accounts": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VestingAccount"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_schedules_to_vesting_account"
        ],
        "properties": {
          "add_schedules_to_vesting_account": {
            "type": "object",
            "required": [
              "address",
              "new_schedules"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "new_schedules": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 3,
                  "minItems": 3
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_vesting_account"
        ],
        "properties": {
          "update_vesting_account": {
            "type": "object",
            "required": [
              "vesting_account"
            ],
            "properties": {
              "vesting_account": {
                "$ref": "#/definitions/VestingAccount"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "claim"
        ],
        "properties": {
          "claim": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "VestingAccount": {
        "description": "CONTRACT: end_time > start_time",
        "type": "object",
        "required": [
          "address",
          "schedules"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "schedules": {
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                {
                  "$ref": "#/definitions/Uint128"
                }
              ],
              "maxItems": 3,
              "minItems": 3
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "vesting_account"
        ],
        "properties": {
          "vesting_account": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "vesting_accounts"
        ],
        "properties": {
          "vesting_accounts": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "order_by": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/OrderBy"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "OrderBy": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "genesis_time",
        "halo_token",
        "owner"
      ],
      "properties": {
        "genesis_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "halo_token": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "vesting_account": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VestingAccountResponse",
      "type": "object",
      "required": [
        "address",
        "info"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/VestingInfo"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "VestingInfo": {
          "type": "object",
          "required": [
            "last_claim_time",
            "schedules"
          ],
          "properties": {
            "last_claim_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "schedules": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ],
                "maxItems": 3,
                "minItems": 3
              }
            }
          },
          "additionalProperties": false
        }
      }
    },
    "vesting_accounts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VestingAccountsResponse",
      "type": "object",
      "required": [
        "vesting_accounts"
      ],
      "properties": {
        "vesting_accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VestingAccountResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "VestingAccountResponse": {
          "type": "object",
          "required": [
            "address",
            "info"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "info": {
              "$ref": "#/definitions/VestingInfo"
            }
          },
          "additionalProperties": false
        },
        "VestingInfo": {
          "type": "object",
          "required": [
            "last_claim_time",
            "schedules"
          ],
          "properties": {
            "last_claim_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "schedules": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ],
                "maxItems": 3,
                "minItems": 3
              }
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
