{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "registrar_contract"
  ],
  "properties": {
    "accepted_tokens": {
      "anyOf": [
        {
          "$ref": "#/definitions/AcceptedTokens"
        },
        {
          "type": "null"
        }
      ]
    },
    "fund_member_limit": {
      "type": [
        "integer",
        "null"
      ],
      "format": "uint32",
      "minimum": 0.0
    },
    "fund_rotation": {
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "funding_goal": {
      "anyOf": [
        {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        {
          "type": "null"
        }
      ]
    },
    "registrar_contract": {
      "type": "string"
    },
    "split_to_liquid": {
      "anyOf": [
        {
          "$ref": "#/definitions/SplitDetails"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "AcceptedTokens": {
      "type": "object",
      "required": [
        "cw20",
        "native"
      ],
      "properties": {
        "cw20": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "native": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "SplitDetails": {
      "type": "object",
      "required": [
        "default",
        "max",
        "min"
      ],
      "properties": {
        "default": {
          "$ref": "#/definitions/Decimal"
        },
        "max": {
          "$ref": "#/definitions/Decimal"
        },
        "min": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
